import base45_swift
import CocoaLumberjackSwift
import Gzip
//import SwiftCBOR
import CBORSwift
import UIKit

public struct ValidationCore {
    private let PREFIX = "AT01"

    public init(){
        DDLog.add(DDOSLogger.sharedInstance)
    }

    
    //MARK: - Public API
    
    public func validateQrCode(_ completionHandler: @escaping (Result<ValidationResult, ValidationError>) -> ()){
        //TODO scan qr code and pass to validate-method
        let data
        validate(encodedData: data, completionHandler)
    }
    
    public func validate(encodedData: String, _ completionHandler: @escaping (Result<ValidationResult, ValidationError>) -> ()) {
        DDLogInfo("Starting validation")
        guard let unprefixedEncodedString = removeScheme(prefix: PREFIX, from: encodedData) else {
            completionHandler(.failure(.INVALID_SCHEME_PREFIX))
            return
        }
        
        guard let decodedData = decode(unprefixedEncodedString) else {
            completionHandler(.failure(.BASE_45_DECODING_FAILED))
            return
        }
        DDLogDebug("Base45-decoded data: \(decodedData.humanReadable())")
        
        guard let decompressedData = decompress(decodedData) else {
            completionHandler(.failure(.DECOMPRESSION_FAILED))
            return
        }
        DDLogDebug("Decompressed data: \(decompressedData.humanReadable())")

        guard let cose = cose(from: decompressedData) else {
            completionHandler(.failure(.COSE_DESERIALIZATION_FAILED))
            return
        }
        //get public key and validate cose
        //get payload from cose
        //return success
        completionHandler(.failure(.GENERAL_ERROR))
    }
    

    //MARK: - Helper Functions
    
    private func queryPublicKey(with keyId: String) -> String {
        //TODO get key from certservice
        return ""
    }
    
    private func removeScheme(prefix: String, from encodedString: String) -> String? {
        guard encodedString.starts(with: prefix) else {
            DDLogError("Encoded data string does not seem to include prefix: \(encodedString.prefix(prefix.count))")
            return nil
        }
        return String(encodedString.dropFirst(prefix.count))
    }
    
    private func decode(_ encodedData: String) -> Data? {
        return try? encodedData.fromBase45()
    }
    
    private func decompress(_ encodedData: Data) -> Data? {
        //GZip uses ZLib internally
        return try? encodedData.gunzipped()
    }
    //Private: Scan QR Code (-> QR Code Helper from eID)
    
    private func cose(from data: Data) -> Cose? {
        let decoded = CBOR.decode(data.bytes)
        guard let tag = decoded as? NSTag,
              let tagObjectValue = tag.objectValue() as? [NSObject],
              let coseHeader = decodeHeader(from: tagObjectValue[0]),
              let cosePayload = decodePayload(from: tagObjectValue[2]),
              let coseSignature = (tagObjectValue[3] as? String)?.data
              else {
            return nil
        }
        let tagValue = tag.tagValue()
        
        return Cose(header: coseHeader, payload: cosePayload, signature: coseSignature)
    }
    
    private func decodeHeader(from object: NSObject) -> CoseHeader? {
        guard let headerData = object.cborBytes else {
            DDLogError("Incorrect COSE header data.")
            return nil
        }
        return CoseHeader(from: CBOR.decode(headerData))
    }
    
    private func decodePayload(from object: NSObject) -> NSObject? {
        guard let payload = object.cborBytes else {
            DDLogError("Cannot decode COSE payload.")
            return nil
        }
        return CBOR.decode(payload) //TODO fix payload decoding
    }
}


extension Data{
 func humanReadable() -> String {
    return self.map { String(format: "%02x ", $0) }.joined()
 }
}

extension NSObject {
    var cborBytes : [UInt8]? {
        get {
            return (self as? String)?.data?.bytes
        }
    }
}
